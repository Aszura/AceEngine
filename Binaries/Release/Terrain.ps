#version 330 core

layout(std140) uniform DynamicBuffer
{
    mat4 modelMatrix;
	vec4 color;
	vec4 specular;
	vec4 ambient;
	float shininess;
};

layout(std140) uniform LightBuffer
{
	vec4 lightColor;
	vec4 lightAmbient;
    vec3 lightPosition;
	float lightIntensity;
};

uniform sampler2D uColorTex;
uniform unsigned int uTiling;

in vec2 uv;
in vec3 normal;

out vec4 fragColor;

const vec3 gamma = vec3(1.0/2.2);

void main(void)
{
	vec4 texel = texture2D(uColorTex,uv*uTiling).rgba * color;
	float ndotl = clamp(dot(normal, lightPosition), 0.0, 1.0);

	fragColor = texel * (lightColor * lightIntensity) * ndotl + (ambient + lightAmbient) * texel;
	fragColor = vec4(pow(fragColor.rgb, gamma), texel.a);
}