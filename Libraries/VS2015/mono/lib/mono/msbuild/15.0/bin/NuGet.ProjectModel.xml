<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.ProjectModel</name>
    </assembly>
    <members>
        <member name="T:NuGet.ProjectModel.CircularMemoryStream">
            <summary>
            A circular memory stream backed by a fixed-size byte buffer.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.DependencyGraphSpec.Restore">
            <summary>
            Projects to restore.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.DependencyGraphSpec.Projects">
            <summary>
            All project specs.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.DependencyGraphSpec.Json">
            <summary>
            File json.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.DependencyGraphSpec.WithProjectClosure(System.String)">
            <summary>
            Retrieve a DependencyGraphSpec with the project closure.
            </summary>
            <param name="projectUniqueName"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.ProjectModel.DependencyGraphSpec.GetClosure(System.String)">
            <summary>
            Retrieve the full project closure including the root project itself.
            </summary>
            <remarks>Results are not sorted in any form.</remarks>
        </member>
        <member name="M:NuGet.ProjectModel.DependencyGraphSpec.SortPackagesByDependencyOrder(System.Collections.Generic.IEnumerable{NuGet.ProjectModel.PackageSpec})">
            <summary>
            Order dependencies by children first.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.DependencyGraphSpec.GetPackageSpecId(NuGet.ProjectModel.PackageSpec)">
            <summary>
            PackageSpec -> id
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.DependencyGraphSpec.GetPackageSpecDependencyIds(NuGet.ProjectModel.PackageSpec)">
            <summary>
            PackageSpec -> Project dependency ids
            </summary>
        </member>
        <member name="T:NuGet.ProjectModel.ExternalProjectReference">
            <summary>
            Represents a reference to a project produced by an external build system, such as msbuild.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.ExternalProjectReference.#ctor(System.String,NuGet.ProjectModel.PackageSpec,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Represents a reference to a project produced by an external build system, such as msbuild.
            </summary>
            <param name="uniqueName">unique project name or full path</param>
            <param name="packageSpec">project.json package spec.</param>
            <param name="msbuildProjectPath">project file if one exists</param>
            <param name="projectReferences">unique names of the referenced projects</param>
        </member>
        <member name="M:NuGet.ProjectModel.ExternalProjectReference.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Represents a reference to a project produced by an external build system, such as msbuild.
            </summary>
            <param name="uniqueName">unique project name or full path</param>
            <param name="packageSpecPath">project.json file path or null if none exists</param>
            <param name="msbuildProjectPath">project file if one exists</param>
            <param name="projectReferences">unique names of the referenced projects</param>
        </member>
        <member name="P:NuGet.ProjectModel.ExternalProjectReference.UniqueName">
            <summary>
            Unique name of the external project
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ExternalProjectReference.PackageSpec">
            <summary>
            The path to the project.json file representing the NuGet dependencies of the project
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ExternalProjectReference.ExternalProjectReferences">
            <summary>
            A list of other external projects this project references. Uses the UniqueName.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ExternalProjectReference.MSBuildProjectPath">
            <summary>
            Path to msbuild project file. Ex: xproj, csproj
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ExternalProjectReference.ProjectJsonPath">
            <summary>
            Path to project.json
            </summary>
            <remarks>This may be null for projects that do not contain project.json.</remarks>
        </member>
        <member name="P:NuGet.ProjectModel.ExternalProjectReference.PackageSpecProjectName">
            <summary>
            Project name used for project.json
            </summary>
            <remarks>This may be null for projects that do not contain project.json.</remarks>
        </member>
        <member name="P:NuGet.ProjectModel.ExternalProjectReference.ProjectName">
            <summary>
            Project name from the package spec or msbuild file.
            </summary>
        </member>
        <member name="T:NuGet.ProjectModel.HashObjectWriter">
             <summary>
             Generates a hash from an object graph.
            
             This is non-private only to facilitate unit testing.
             </summary>
        </member>
        <member name="M:NuGet.ProjectModel.HashObjectWriter.#ctor(NuGet.ProjectModel.IHashFunction)">
            <summary>
            Creates a new instance with the provide hash function.
            </summary>
            <param name="hashFunc">An <see cref="T:NuGet.ProjectModel.IHashFunction"/> instance.  Throws if <c>null</c>.</param>
        </member>
        <member name="M:NuGet.ProjectModel.HashObjectWriter.GetHash">
             <summary>
             Gets the hash for the object.
            
             Once GetHash is called, no further writing is allowed.
             </summary>
             <returns>A hash of the object.</returns>
        </member>
        <member name="T:NuGet.ProjectModel.IExternalProjectReferenceProvider">
            <summary>
            Provides external project reference closures.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.IExternalProjectReferenceProvider.GetReferences(System.String)">
            <summary>
            Get the full p2p closure from an msbuild project path.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.IExternalProjectReferenceProvider.GetEntryPoints">
            <summary>
            Returns all known entry points.
            </summary>
        </member>
        <member name="T:NuGet.ProjectModel.IHashFunction">
            <summary>
            Provides incremental hashing.
            
            This is non-private only to facilitate unit testing.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.IHashFunction.GetHash">
             <summary>
             Gets the hash.
            
             Once GetHash is called, no further hash updates are allowed.
             </summary>
             <returns>A base64-encoded hash.</returns>
        </member>
        <member name="M:NuGet.ProjectModel.IHashFunction.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Incrementally updates the hash.
            </summary>
            <param name="data">The data to be included in the hash.</param>
            <param name="offset">The offset from which data should be read.</param>
            <param name="count">The count of bytes to read.</param>
        </member>
        <member name="M:NuGet.ProjectModel.JsonPackageSpecReader.GetPackageSpec(System.String,System.String)">
            <summary>
            Load and parse a project.json file
            </summary>
            <param name="name">project name</param>
            <param name="packageSpecPath">file path</param>
        </member>
        <member name="M:NuGet.ProjectModel.JsonPackageSpecReader.GetBoolOrFalse(Newtonsoft.Json.Linq.JToken,System.String,System.String)">
            <summary>
            Returns true if the property is set to true. Otherwise false.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.JsonPackageSpecReader.GetBoolOrFalse(Newtonsoft.Json.Linq.JObject,System.String,System.String)">
            <summary>
            Returns true if the property is set to true. Otherwise false.
            </summary>
        </member>
        <member name="F:NuGet.ProjectModel.JsonUtility.DefaultLoadSettings">
            <summary>
            JsonLoadSettings with line info and comments ignored.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.JsonUtility.LoadJson(System.IO.TextReader)">
            <summary>
            Load json from a file to a JObject using the default load settings.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.IAssetsLogMessage.Level">
            <summary>
            Level to indicate if this is an error or wanring.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.IAssetsLogMessage.Code">
            <summary>
            Indicates the NuGet error code.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.IAssetsLogMessage.Message">
            <summary>
            Indicates the staring generated by the code to go with the error code.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.IAssetsLogMessage.ProjectPath">
            <summary>
            Indicates the project for which the error was thrown.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.IAssetsLogMessage.WarningLevel">
            <summary>
            Level to indicate the warning level for the message.
            This is relevant only if the Level == LogLevel.Warning.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.IAssetsLogMessage.FilePath">
            <summary>
            Indicates the file for which the error was thrown.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.IAssetsLogMessage.StartLineNumber">
            <summary>
            Indicates the starting line for which the error was thrown.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.IAssetsLogMessage.StartColumnNumber">
            <summary>
            Indicates the starting column for which the error was thrown.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.IAssetsLogMessage.EndLineNumber">
            <summary>
            Indicates the ending line for which the error was thrown.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.IAssetsLogMessage.EndColumnNumber">
            <summary>
            Indicates the ending column for which the error was thrown.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.IAssetsLogMessage.LibraryId">
            <summary>
            Project or Package Id
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.IAssetsLogMessage.TargetGraphs">
            <summary>
            List of TargetGraphs
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.LockFileExtensions.GetTargetGraphs(NuGet.ProjectModel.IAssetsLogMessage,NuGet.ProjectModel.LockFile)">
            <summary>
            Get target graphs for the current log message.
            </summary>
            <remarks>If the message does not contain target graphs all graphs in the file
            will be returned.</remarks>
        </member>
        <member name="M:NuGet.ProjectModel.LockFileExtensions.GetTargetLibraries(NuGet.ProjectModel.IAssetsLogMessage,NuGet.ProjectModel.LockFile)">
            <summary>
            Get the library from each target graph it exists in.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.LockFileExtensions.GetTargetLibrary(NuGet.ProjectModel.LockFileTarget,System.String)">
            <summary>
            Get the library by id from the target graph.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.LockFileFormat.WriteLogMessage(NuGet.ProjectModel.IAssetsLogMessage,System.String)">
            <summary>
            Converts the <code>IAssetsLogMessage</code> object into a <code>JObject</code> that can be written into the assets file.
            </summary>
            <param name="logMessage"><code>IAssetsLogMessage</code> representing the log message.</param>
            <returns><code>JObject</code> containg the json representation of the log message.</returns>
        </member>
        <member name="M:NuGet.ProjectModel.LockFileFormat.ReadLogMessage(Newtonsoft.Json.Linq.JObject,System.String)">
            <summary>
            Converts an <code>JObject</code> into an <code>IAssetsLogMessage</code>.
            </summary>
            <param name="json"><code>JObject</code> containg the json representation of the log message.</param>
            <returns><code>IAssetsLogMessage</code> representing the log message.</returns>
        </member>
        <member name="P:NuGet.ProjectModel.LockFileLibrary.Path">
            <summary>
            Relative path to the project.json file for projects
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.LockFileLibrary.MSBuildProject">
            <summary>
            Relative path to the msbuild project file. Ex: xproj, csproj
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.LockFileLibrary.Clone">
            <summary>
            Makes a deep clone of the lock file library.
            </summary>
            <returns>The cloned lock file library.</returns>
        </member>
        <member name="T:NuGet.ProjectModel.PackageSpec">
            <summary>
            Represents the specification of a package that can be built.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.PackageSpec.RestoreSettings">
            <summary>
            Project Settings is used to pass settings like HideWarningsAndErrors down to lower levels.
            Currently they do not include any settings that affect the final result of restore.
            This should not be part of the Equals and GetHashCode.
            Don't write this to the package spec
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.PackageSpec.RestoreMetadata">
            <summary>
            Additional MSBuild properties.
            </summary>
            <remarks>Optional. This is normally set for internal use only.</remarks>
        </member>
        <member name="M:NuGet.ProjectModel.PackageSpec.Clone">
            <summary>
            Clone a PackageSpec
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.PackageSpecExtensions.GetTargetFramework(NuGet.ProjectModel.PackageSpec,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Get the nearest framework available in the project.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.PackageSpecExtensions.GetRestoreMetadataFramework(NuGet.ProjectModel.PackageSpec,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Get restore metadata framework. This is based on the project's target frameworks, then an 
            exact match is found under restore metadata.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.PackageSpecOperations.GetDependencyLists(NuGet.ProjectModel.PackageSpec,System.Collections.Generic.IEnumerable{NuGet.Frameworks.NuGetFramework},System.Boolean)">
            <summary>
            Get the list of dependencies in the package spec. Unless null is provided, the
            <paramref name="frameworksToConsider"/> set can be used to get the dependency lists for only for the
            provided target frameworks. If null is provided, all framework dependency lists are returned.
            </summary>
            <param name="spec">The package spec.</param>
            <param name="includeGenericDependencies">
            Whether or not the generic dependency list should be returned (dependencies that apply to all target
            frameworks.
            </param>
            <param name="frameworksToConsider">The frameworks to consider.</param>
            <returns>The sequence of dependency lists.</returns>
        </member>
        <member name="T:NuGet.ProjectModel.PackageSpecReferenceDependencyProvider">
            <summary>
            Handles both external references and projects discovered through directories
            If the type is set to external project directory discovery will be disabled.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.PackageSpecReferenceDependencyProvider.GetDependenciesFromSpecRestoreMetadata(NuGet.ProjectModel.PackageSpec,NuGet.Frameworks.NuGetFramework)">
            <summary>
            .NETCore projects
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.PackageSpecReferenceDependencyProvider.GetDependenciesFromExternalReference(NuGet.ProjectModel.ExternalProjectReference,NuGet.ProjectModel.PackageSpec,NuGet.Frameworks.NuGetFramework)">
            <summary>
            UWP Project.json
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.PackageSpecReferenceDependencyProvider.GetProjectNames(System.Collections.Generic.IEnumerable{NuGet.LibraryModel.LibraryDependency})">
            <summary>
            Filter dependencies down to only possible project references and return the names.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.PackageSpecUtility.SpecifySnapshot(System.String,System.String)">
            <summary>
            Apply a snapshot value.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.PackageSpecUtility.IsSnapshotVersion(System.String)">
            <summary>
            True if the string is a snapshot version.
            </summary>
        </member>
        <member name="T:NuGet.ProjectModel.PackageSpecWriter">
            <summary>
            Writes out a PackageSpec object graph.
            
            This is non-private only to facilitate unit testing.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.PackageSpecWriter.Write(NuGet.ProjectModel.PackageSpec,NuGet.RuntimeModel.IObjectWriter)">
            <summary>
            Writes a PackageSpec to an <c>NuGet.Common.IObjectWriter</c> instance. 
            </summary>
            <param name="packageSpec">A <c>PackageSpec</c> instance.</param>
            <param name="writer">An <c>NuGet.Common.IObjectWriter</c> instance.</param>
        </member>
        <member name="M:NuGet.ProjectModel.PackageSpecWriter.WriteToFile(NuGet.ProjectModel.PackageSpec,System.String)">
            <summary>
            Writes a PackageSpec to a file.
            </summary>
            <param name="packageSpec">A <c>PackageSpec</c> instance.</param>
            <param name="filePath">A file path to write to.</param>
        </member>
        <member name="M:NuGet.ProjectModel.PackageSpecWriter.SetMSBuildMetadata(NuGet.RuntimeModel.IObjectWriter,NuGet.ProjectModel.PackageSpec)">
            <summary>
            This method sets the msbuild metadata that's important for restore. Ensures that frameworks regardless of which way they're stores in the metadata(full name or short tfm name) are written out the same.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.PackageSpecWriter.SetDependencies(NuGet.RuntimeModel.IObjectWriter,System.String,System.Collections.Generic.IEnumerable{NuGet.LibraryModel.LibraryDependency})">
            <summary>
            This method sorts the libraries based on the name
            This method also writes out the normalized versions to avoid cases where original string is set because it was gotten through project system vs being installed from PM UI
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.ProjectStyle">
            <summary>
            Restore behavior type.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.ProjectPath">
            <summary>
            MSBuild project file path.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.ProjectJsonPath">
            <summary>
            Full path to the project.json file if it exists.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.OutputPath">
            <summary>
            Assets file output path.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.ProjectName">
            <summary>
            Friendly project name.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.ProjectUniqueName">
            <summary>
            Name unique to the project across the solution.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.Sources">
            <summary>
            Package feed sources.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.PackagesPath">
            <summary>
            User packages folder path.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.CacheFilePath">
            <summary>
            Cache file path
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.FallbackFolders">
            <summary>
            Fallback folders.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.ConfigFilePaths">
            <summary>
            ConfigFilePaths used.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.TargetFrameworks">
            <summary>
            Framework specific metadata, this may be a subset of the project's frameworks.
            Operations to determine the nearest framework should be done against the project's frameworks, 
            and then matched directly to this section.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.OriginalTargetFrameworks">
            <summary>
            Original target frameworks strings. These are used to match msbuild conditionals to $(TargetFramework)
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.CrossTargeting">
            <summary>
            True if $(TargetFrameworks) is used and the build is using Cross Targeting.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.LegacyPackagesDirectory">
            <summary>
            Whether or not to restore the packages directory using the legacy format, which write original case paths
            instead of lowercase.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.Files">
            <summary>
            Asset files. These should be equivalent to the files that would be
            in the nupkg after packing the project.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.ValidateRuntimeAssets">
            <summary>
            Compatibility check for runtime framework assets.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.SkipContentFileWrite">
            <summary>
            True if this is a Legacy Package Reference project
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadata.ProjectWideWarningProperties">
            <summary>
            Contains Project wide properties for Warnings.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadataFile.PackagePath">
            <summary>
            Relative path that would be used within a package.
            This will be used to determine the asset type.
            Example: lib/net45/a.dll
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadataFile.AbsolutePath">
            <summary>
            Absolute path on disk.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadataFrameworkInfo.FrameworkName">
            <summary>
            Target framework
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreMetadataFrameworkInfo.ProjectReferences">
            <summary>
            Project references
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreReference.ProjectUniqueName">
            <summary>
            Project unique name.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreReference.ProjectPath">
            <summary>
            Full path to the msbuild project file.
            </summary>
        </member>
        <member name="T:NuGet.ProjectModel.ProjectRestoreSettings">
            <summary>
            This class is used to hold restore related, project specific settings.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.ProjectRestoreSettings.HideWarningsAndErrors">
            <summary>
            Bool property is used inr estore command to not log errors and warning.
            Currently this is only being used for net core based projects on nomination.
            </summary>
        </member>
        <member name="F:NuGet.ProjectModel.ProjectStyle.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:NuGet.ProjectModel.ProjectStyle.ProjectJson">
            <summary>
            UAP style, project.lock.json is generated next to project.json
            </summary>
        </member>
        <member name="F:NuGet.ProjectModel.ProjectStyle.PackageReference">
            <summary>
            MSBuild style, project.assets.json is generated in the RestoreOutputPath folder
            </summary>
        </member>
        <member name="F:NuGet.ProjectModel.ProjectStyle.DotnetCliTool">
            <summary>
            Tool
            </summary>
        </member>
        <member name="F:NuGet.ProjectModel.ProjectStyle.Standalone">
            <summary>
            Non-MSBuild project with no project dependencies.
            </summary>
        </member>
        <member name="F:NuGet.ProjectModel.ProjectStyle.PackagesConfig">
            <summary>
            Packages.config project
            </summary>
        </member>
        <member name="T:NuGet.ProjectModel.Sha512HashFunction">
            <summary>
            A SHA-512 hash function that supports incremental hashing.
            
            This is non-private only to facilitate unit testing.
            </summary>
        </member>
        <member name="T:NuGet.ProjectModel.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.Strings.ArgumentNullOrEmpty">
            <summary>
              Looks up a localized string similar to Argument cannot be null or empty..
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.Strings.InvalidDependencyTarget">
            <summary>
              Looks up a localized string similar to Invalid dependency target value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.Strings.InvalidPackageType">
            <summary>
              Looks up a localized string similar to The pack options package type must be a string or array of strings in &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.Strings.Log_ErrorReadingLockFile">
            <summary>
              Looks up a localized string similar to Error loading lock file &apos;{0}&apos; : {1}.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.Strings.Log_ErrorReadingProjectJson">
            <summary>
              Looks up a localized string similar to Error reading &apos;{0}&apos; : {1}.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.Strings.Log_ErrorReadingProjectJsonWithLocation">
            <summary>
              Looks up a localized string similar to Error reading &apos;{0}&apos; at line {1} column {2} : {3}.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.Strings.Log_InvalidImportFramework">
            <summary>
              Looks up a localized string similar to Imports contains an invalid framework: &apos;{0}&apos; in &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.Strings.Log_ProblemReadingCacheFile">
            <summary>
              Looks up a localized string similar to Problem reading the cache file {0} : {1}.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.Strings.MissingToolName">
            <summary>
              Looks up a localized string similar to Unable to resolve tool &apos;&apos;..
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.Strings.MissingVersionOnDependency">
            <summary>
              Looks up a localized string similar to Package dependencies must specify a version range..
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.Strings.MissingVersionOnTool">
            <summary>
              Looks up a localized string similar to Tools must specify a version range..
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.TargetFrameworkInformation.Imports">
            <summary>
            A fallback PCL framework to use when no compatible items
            were found for <see cref="P:NuGet.ProjectModel.TargetFrameworkInformation.FrameworkName"/>.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.TargetFrameworkInformation.AssetTargetFallback">
            <summary>
            If True AssetTargetFallback behavior will be used for Imports.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.TargetFrameworkInformation.Warn">
            <summary>
            Display warnings when the Imports framework is used.
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.ToolPathResolver.GetLockFilePath(System.String)">
            <summary>
            Given a toolDirectory path, it returns the full assets file path
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.ToolPathResolver.GetLockFilePath(System.String,NuGet.Versioning.NuGetVersion,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Given a package id, version and framework, returns the full assets file path
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.ToolPathResolver.GetToolDirectoryPath(System.String,NuGet.Versioning.NuGetVersion,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Given a package id, version and framework, returns the tool directory path where the assets/cache file are located for tools
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.ToolPathResolver.GetPackagesToolsBasePath">
            <summary>
            The base path for all restored tools
            </summary>
        </member>
        <member name="M:NuGet.ProjectModel.ToolPathResolver.GetBestToolDirectoryPath(System.String,NuGet.Versioning.VersionRange,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Returns the directory (packagesFolder/.tools/id/version for example) for the best matching version if any. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.ProjectModel.ToolPathResolver.GetAvailableToolVersions(System.String)">
            <summary>
            Given a package id, looks in the base tools folder and returns all the version available on disk, possibly none
            </summary>
        </member>
        <member name="T:NuGet.ProjectModel.WarningProperties">
            <summary>
            Class to hold warning properties given by project system.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.WarningProperties.WarningsAsErrors">
            <summary>
            List of Warning Codes that should be treated as Errors.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.WarningProperties.NoWarn">
            <summary>
            List of Warning Codes that should be ignored.
            </summary>
        </member>
        <member name="P:NuGet.ProjectModel.WarningProperties.AllWarningsAsErrors">
            <summary>
            Indicates if all warnings should be ignored.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.OrderedEquals``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two enumberables for equality, ordered according to the specified key and optional comparer. Handles null values gracefully.
            </summary>
            <typeparam name="TSource">The type of the list</typeparam>
            <typeparam name="TKey">The type of the sorting key</typeparam>
            <param name="self">This list</param>
            <param name="other">The other list</param>
            <param name="keySelector">The function to extract the key from each item in the list</param>
            <param name="orderComparer">An optional comparer for comparing keys</param>
            <param name="sequenceComparer">An optional comparer for sequences</param>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SequenceEqualWithNullCheck``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sequence for equality, allowing either sequence to be null. If one is null, both have to be
            null for equality.
            </summary>
        </member>
        <member name="M:NuGet.Shared.EqualityUtility.SetEqualsWithNullCheck``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Compares two sets for equality, allowing either sequence to be null.
            If one is null, both have to be null for equality.
            </summary>
        </member>
        <member name="T:NuGet.Shared.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``2(``0,``1)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.HashCodeCombiner.GetHashCode``3(``0,``1,``2)">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return the enumerable as a List of T, copying if required. Optimized for common case where it is an List of T.
            Avoid mutating the return value.
            </summary>
            <remarks>https://aspnetwebstack.codeplex.com/SourceControl/latest#src/Common/CollectionExtensions.cs</remarks>
        </member>
        <member name="M:NuGet.Shared.Extensions.AsHashSet``1(System.Collections.Generic.ISet{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Return the ISet as a HashSet of T, copying if required. Optimized for common case where it is a HashSet of T.
            Avoid mutating the return value.
            </summary>
        </member>
    </members>
</doc>
